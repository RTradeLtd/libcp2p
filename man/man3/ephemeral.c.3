.TH "/media/solidity/DATA/Code/RTradeLtd/libcp2p/src/crypto/ephemeral.c" 3 "Thu Jul 23 2020" "libcp2p" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/media/solidity/DATA/Code/RTradeLtd/libcp2p/src/crypto/ephemeral.c
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'crypto/ephemeral\&.h'\fP
.br
\fC#include 'mbedtls/config\&.h'\fP
.br
\fC#include 'mbedtls/ctr_drbg\&.h'\fP
.br
\fC#include 'mbedtls/ecdh\&.h'\fP
.br
\fC#include 'mbedtls/entropy\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBStretchedKey\fP * \fBlibp2p_crypto_ephemeral_stretched_key_new\fP ()"
.br
.RI "Routines to help with the \fBStretchedKey\fP struct\&. "
.ti -1c
.RI "void \fBlibp2p_crypto_ephemeral_stretched_key_free\fP (struct \fBStretchedKey\fP *key)"
.br
.ti -1c
.RI "static struct \fBEphemeralPrivateKey\fP * \fBlibp2p_crypto_ephemeral_key_new\fP (void)"
.br
.ti -1c
.RI "void \fBlibp2p_crypto_ephemeral_key_free\fP (struct \fBEphemeralPrivateKey\fP *in)"
.br
.ti -1c
.RI "static void \fBserialize_uint64\fP (const uint64_t in, unsigned char out[8])"
.br
.ti -1c
.RI "static uint64_t \fBunserialize_uint64\fP (unsigned char in[8])"
.br
.ti -1c
.RI "static int \fBlibp2p_crypto_ephemeral_point_marshal\fP (int bit_size, uint64_t x, uint64_t y, unsigned char **results, size_t *bytes_written)"
.br
.ti -1c
.RI "static int \fBlibp2p_crypto_ephemeral_point_unmarshal\fP (int bit_size, unsigned char *buffer, size_t buffer_length, uint64_t *x, uint64_t *y)"
.br
.ti -1c
.RI "int \fBlibp2p_crypto_ephemeral_keypair_generate\fP (char *curve, struct \fBEphemeralPrivateKey\fP **private_key_ptr)"
.br
.RI "Generate a Ephemeral Public Key as well as a shared key\&. "
.ti -1c
.RI "static int \fBlibp2p_crypto_ephemeral_keypair_to_public_bytes\fP (struct \fBEphemeralPublicKey\fP *public_key, unsigned char **results, size_t *bytes_written)"
.br
.ti -1c
.RI "int \fBlibp2p_crypto_ephemeral_generate_shared_secret\fP (struct \fBEphemeralPrivateKey\fP *private_key, const unsigned char *remote_public_key, size_t remote_public_key_size)"
.br
.RI "Generate a shared secret\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "int libp2p_crypto_ephemeral_generate_shared_secret (struct \fBEphemeralPrivateKey\fP * private_key, const unsigned char * remote_public_key, size_t remote_public_key_size)"

.PP
Generate a shared secret\&. Generate a shared secret 
.PP
\fBParameters\fP
.RS 4
\fIprivate_key\fP the context, also where it puts the shared secret 
.br
\fIremote_public_key\fP the key the remote gave us 
.br
\fIremote_public_key_size\fP the size of the remote public key @reutrns true(1) on success, otherwise false(0) 
.RE
.PP

.PP
Definition at line 238 of file ephemeral\&.c\&.
.SS "void libp2p_crypto_ephemeral_key_free (struct \fBEphemeralPrivateKey\fP * in)"

.PP
Definition at line 62 of file ephemeral\&.c\&.
.SS "static struct \fBEphemeralPrivateKey\fP* libp2p_crypto_ephemeral_key_new (void)\fC [static]\fP"

.PP
Definition at line 38 of file ephemeral\&.c\&.
.SS "int libp2p_crypto_ephemeral_keypair_generate (char * curve, struct \fBEphemeralPrivateKey\fP ** private_key_ptr)"

.PP
Generate a Ephemeral Public Key as well as a shared key\&. Generate a Ephemeral keypair 
.PP
\fBParameters\fP
.RS 4
\fIcurve\fP the curve to use (P-256, P-384, or P-521) 
.br
\fIprivate_key\fP the struct to store the generated key 
.RE
.PP
\fBReturns\fP
.RS 4
true(1) on success, otherwise false(0) 
.RE
.PP

.PP
Definition at line 158 of file ephemeral\&.c\&.
.SS "static int libp2p_crypto_ephemeral_keypair_to_public_bytes (struct \fBEphemeralPublicKey\fP * public_key, unsigned char ** results, size_t * bytes_written)\fC [static]\fP"
Generate a public key from a private key 
.PP
\fBParameters\fP
.RS 4
\fIpublic\fP key 
.br
\fIresults\fP the results 
.br
\fIbytes_written\fP the number of bytes written 
.RE
.PP
\fBReturns\fP
.RS 4
true(1) on success, otherwise false(0) 
.RE
.PP

.PP
Definition at line 224 of file ephemeral\&.c\&.
.SS "static int libp2p_crypto_ephemeral_point_marshal (int bit_size, uint64_t x, uint64_t y, unsigned char ** results, size_t * bytes_written)\fC [static]\fP"

.PP
Definition at line 110 of file ephemeral\&.c\&.
.SS "static int libp2p_crypto_ephemeral_point_unmarshal (int bit_size, unsigned char * buffer, size_t buffer_length, uint64_t * x, uint64_t * y)\fC [static]\fP"

.PP
Definition at line 134 of file ephemeral\&.c\&.
.SS "void libp2p_crypto_ephemeral_stretched_key_free (struct \fBStretchedKey\fP * key)"

.PP
Definition at line 26 of file ephemeral\&.c\&.
.SS "struct \fBStretchedKey\fP* libp2p_crypto_ephemeral_stretched_key_new ()"

.PP
Routines to help with the \fBStretchedKey\fP struct\&. 
.PP
Definition at line 12 of file ephemeral\&.c\&.
.SS "static void serialize_uint64 (const uint64_t in, unsigned char out[8])\fC [static]\fP"

.PP
Definition at line 76 of file ephemeral\&.c\&.
.SS "static uint64_t unserialize_uint64 (unsigned char in[8])\fC [static]\fP"

.PP
Definition at line 87 of file ephemeral\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for libcp2p from the source code\&.
