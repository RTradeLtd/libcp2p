.TH "md__media_solidity__d_a_t_a__code__r_trade_ltd_libcp2p_docs__c_o_n_t_r_i_b_u_t_i_n_g" 3 "Thu Aug 6 2020" "libcp2p" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__media_solidity__d_a_t_a__code__r_trade_ltd_libcp2p_docs__c_o_n_t_r_i_b_u_t_i_n_g \- Contribution Guidelines 
The following is a short summary on development guidelines:
.PP
.IP "\(bu" 2
Code submitted in PRs must be formatted using \fCmake format\fP
.IP "\(bu" 2
All code must be tested with CMocka
.IP "\(bu" 2
All code must be documented with doxygen compatible comments
.IP "\(bu" 2
All code must be tested with valgrind
.PP
.SH "style guides"
.PP
when it comes to programming everyone has their own style of writing code, and in languages like C which can accept almost any style of code, it can lead to large code bases looking like they were written by different people\&. Ultimately this makes it harder to analyze the codebase as a whole\&.
.PP
As such we enforce very strict styling rules within the codebase, and all code must be formatted using \fCclang-format\fP\&. In addition there are a few other rules that apply to style of code that aren't caught by \fCclang-format\fP\&. Adhering to these style guidelines is \fBnot\fP optional, and all code that is submitted via PRs \fBmust\fP follow these guidelines\&. Refusal to follow the guidelines will result in PRs not being accepted\&. This may seem a bit strict to some people, but it is necessary in ensuring that the codebase is maintainable, and easy to read\&.
.SS "comments"
\fIEvery single function, typedef, struct, or global variable\fP \fBmust\fP be commented using valid doxygen comments\&. For functions the comments must clearly explain the purpose of the function, the arguments of the function, and the return values, as well as any other notes\&. Memory allocation and management of memory that is required for function calls must also be documented via \fC@warning\fP tags\&. For typedefs, structs, and global variables the comments must cleary explain the purpose of them\&.
.SS "braces"
You must always have the opening brace on the same line of the expression\&.
.PP
For example the following is acceptable
.PP
.PP
.nf
if (abc == true) {
    /* do stuff */
}
.fi
.PP
.PP
Whereas the following is not acceptable:
.PP
.PP
.nf
if (abc == true)
{
  /* do stuff */
}
.fi
.PP
.SS "memory allocations"
When it comes to managing memory, there is no strict rule on whether or not you allocate the memory for an object in a function call, or do it outside of a function call providing the memory as an argument\&. Either of these two patterns is acceptable, however you must document the function via a \fC@warning\fP tag that indicates how the memory is supposed to be managed\&.
.SH "writing tests"
.PP
If starting a new test file, make sure the last part of the file name is \fC_test\&.c\fP, and that your actual tests have the following function signature: 
.PP
.nf
void test_your_test_name(void **state)

.fi
.PP
.PP
Use the following template to copy and paste when starting a new test file
.PP
.PP
.nf
#include <stdio\&.h>
#include <assert\&.h>
#include <stdarg\&.h>
#include <stddef\&.h>
#include <setjmp\&.h>
#include <cmocka\&.h>

#pragma GCC diagnostic ignored "-Wunused-parameter"

/*
  write your tests here
*/

int main(void) {
    const struct CMUnitTest tests[] = {
        cmocka_unit_test(/* your test here */)
    };
    return cmocka_run_group_tests(tests, NULL, NULL);
}
.fi
.PP
.SH "mbedtls"
.PP
.IP "\(bu" 2
\fCstoring ecdsa context\fP
.IP "\(bu" 2
https://tls.mbed.org/discussions/generic/how-to-store-a-ecdsa-context 
.PP

