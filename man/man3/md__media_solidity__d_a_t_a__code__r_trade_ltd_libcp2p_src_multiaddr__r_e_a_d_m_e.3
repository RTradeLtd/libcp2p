.TH "md__media_solidity__d_a_t_a__code__r_trade_ltd_libcp2p_src_multiaddr__r_e_a_d_m_e" 3 "Thu Aug 6 2020" "libcp2p" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__media_solidity__d_a_t_a__code__r_trade_ltd_libcp2p_src_multiaddr__r_e_a_d_m_e \- c-multiaddr 
multiaddr for IPFS in C\&.
.SS "Multiaddr provides easy networking protocols nesting, easy encapsulation of extra protocols, easy tunneling, etc\&."
.SH "Usage:"
.PP
.SS "All you need to include is multiaddr\&.h"
.SS "Maddr struct:"
.IP "\(bu" 2
char * string; // String that contains addresses such as /ip4/192\&.168\&.1\&.1/
.IP "\(bu" 2
uint8_t * bytes; // uint8_t * that contains the enecoded address
.IP "\(bu" 2
size_t bsize; //size_t that contains the real bytes size (Use it whenever using the bytes so you don't input trash!)
.PP
.SS "New Multi Address From String(multi_address_new_from_string)"
struct multi_address* a = multi_address_new_from_string('/ip4/127\&.0\&.0\&.1/tcp/8080/');
.SS "Obtaining the byte buffer(\&.bytes, \&.bsize[0]):"
printf('TEST BYTES: %s\\n',Var_To_Hex(a->bsize, a->bytes)); Var_To_Hex = Byte \fBBuffer\fP to Hex String Hex_To_Var = Hex String to Byte \fBBuffer\fP
.SS "Encapsulation & Decapsulation(m_encapsulate, m_decapsulate)"
.SS "Remember, Decapsulation happens from right to left, never in reverse, if you have /ip4/udp/ipfs/ if you decapsulate 'udp' you will also take out ipfs!"
.IP "\(bu" 2
Now the string is: /ip4/192\&.168\&.1\&.1/
.IP "\(bu" 2
multi_address_encapsulate(a,'/udp/3333/'); //Adds udp/3333/
.IP "\(bu" 2
Now the string is: /ip4/192\&.168\&.1\&.1/udp/3333/
.IP "\(bu" 2
multi_address_decapsulate(a,'udp'); //Removes udp protocol and its address
.IP "\(bu" 2
Now the string is: /ip4/192\&.168\&.1\&.1/
.IP "\(bu" 2
multi_address_encapsulate(a,'/tcp/8080');
.IP "\(bu" 2
Now the string is: /ip4/192\&.168\&.1\&.1/tcp/8080/
.PP
.SH "Constructing a multi_address from bytes:"
.PP
.IP "\(bu" 2
struct multi_address* beta;
.IP "\(bu" 2
beta = multi_address_new_from_bytes(a->bytes,a->bsize); //This will already construct back to the string too!
.IP "\(bu" 2
printf('B STRING: %s\\n',beta->string); //So after encapsulation and decapsulation atm this string would
.IP "\(bu" 2
contain: /ip4/192\&.168\&.1\&.1/tcp/8080/ 
.PP

