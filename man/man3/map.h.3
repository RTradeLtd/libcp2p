.TH "/media/solidity/DATA/Code/RTradeLtd/libcp2p/include/utils/map.h" 3 "Wed Jul 22 2020" "libcp2p" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/media/solidity/DATA/Code/RTradeLtd/libcp2p/include/utils/map.h
.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBmap_base_t\fP"
.br
.ti -1c
.RI "struct \fBmap_iter_t\fP"
.br
.ti -1c
.RI "struct \fBmap_void_t\fP"
.br
.ti -1c
.RI "struct \fBmap_str_t\fP"
.br
.ti -1c
.RI "struct \fBmap_int_t\fP"
.br
.ti -1c
.RI "struct \fBmap_char_t\fP"
.br
.ti -1c
.RI "struct \fBmap_float_t\fP"
.br
.ti -1c
.RI "struct \fBmap_double_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAP_VERSION\fP   '0\&.1\&.0'"
.br
.ti -1c
.RI "#define \fBmap_t\fP(T)"
.br
.ti -1c
.RI "#define \fBmap_init\fP(m)   memset(m, 0, sizeof(*(m)))"
.br
.ti -1c
.RI "#define \fBmap_deinit\fP(m)   \fBmap_deinit_\fP(&(m)\->\fBbase\fP)"
.br
.ti -1c
.RI "#define \fBmap_get\fP(m,  key)   ((m)\->ref = \fBmap_get_\fP(&(m)\->\fBbase\fP, key))"
.br
.ti -1c
.RI "#define \fBmap_set\fP(m,  key,  value)   ((m)\->tmp = (value), \fBmap_set_\fP(&(m)\->\fBbase\fP, key, &(m)\->tmp, sizeof((m)\->tmp)))"
.br
.ti -1c
.RI "#define \fBmap_remove\fP(m,  key)   \fBmap_remove_\fP(&(m)\->\fBbase\fP, key)"
.br
.ti -1c
.RI "#define \fBmap_iter\fP(m)   \fBmap_iter_\fP()"
.br
.ti -1c
.RI "#define \fBmap_next\fP(m,  iter)   \fBmap_next_\fP(&(m)\->\fBbase\fP, iter)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBmap_node_t\fP \fBmap_node_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBmap_deinit_\fP (\fBmap_base_t\fP *m)"
.br
.ti -1c
.RI "void * \fBmap_get_\fP (\fBmap_base_t\fP *m, const char *key)"
.br
.ti -1c
.RI "int \fBmap_set_\fP (\fBmap_base_t\fP *m, const char *key, void *value, int vsize)"
.br
.ti -1c
.RI "void \fBmap_remove_\fP (\fBmap_base_t\fP *m, const char *key)"
.br
.ti -1c
.RI "\fBmap_iter_t\fP \fBmap_iter_\fP (void)"
.br
.ti -1c
.RI "const char * \fBmap_next_\fP (\fBmap_base_t\fP *m, \fBmap_iter_t\fP *iter)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define map_deinit(m)   \fBmap_deinit_\fP(&(m)\->\fBbase\fP)"

.PP
Definition at line 37 of file map\&.h\&.
.SS "#define map_get(m, key)   ((m)\->ref = \fBmap_get_\fP(&(m)\->\fBbase\fP, key))"

.PP
Definition at line 39 of file map\&.h\&.
.SS "#define map_init(m)   memset(m, 0, sizeof(*(m)))"

.PP
Definition at line 35 of file map\&.h\&.
.SS "#define map_iter(m)   \fBmap_iter_\fP()"

.PP
Definition at line 46 of file map\&.h\&.
.SS "#define map_next(m, iter)   \fBmap_next_\fP(&(m)\->\fBbase\fP, iter)"

.PP
Definition at line 48 of file map\&.h\&.
.SS "#define map_remove(m, key)   \fBmap_remove_\fP(&(m)\->\fBbase\fP, key)"

.PP
Definition at line 44 of file map\&.h\&.
.SS "#define map_set(m, key, value)   ((m)\->tmp = (value), \fBmap_set_\fP(&(m)\->\fBbase\fP, key, &(m)\->tmp, sizeof((m)\->tmp)))"

.PP
Definition at line 41 of file map\&.h\&.
.SS "#define map_t(T)"
\fBValue:\fP
.PP
.nf
    struct {             \
        map_base_t base; \
        T *ref;          \
        T tmp;           \
    }
.fi
.PP
Definition at line 28 of file map\&.h\&.
.SS "#define MAP_VERSION   '0\&.1\&.0'"
Copyright (c) 2014 rxi
.PP
This library is free software; you can redistribute it and/or modify it under the terms of the MIT license\&. See LICENSE for details\&. 
.PP
Definition at line 13 of file map\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBmap_node_t\fP \fBmap_node_t\fP"

.PP
Definition at line 16 of file map\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void map_deinit_ (\fBmap_base_t\fP * m)"

.PP
Definition at line 105 of file map\&.c\&.
.SS "void* map_get_ (\fBmap_base_t\fP * m, const char * key)"

.PP
Definition at line 120 of file map\&.c\&.
.SS "\fBmap_iter_t\fP map_iter_ (void)"

.PP
Definition at line 164 of file map\&.c\&.
.SS "const char* map_next_ (\fBmap_base_t\fP * m, \fBmap_iter_t\fP * iter)"

.PP
Definition at line 171 of file map\&.c\&.
.SS "void map_remove_ (\fBmap_base_t\fP * m, const char * key)"

.PP
Definition at line 153 of file map\&.c\&.
.SS "int map_set_ (\fBmap_base_t\fP * m, const char * key, void * value, int vsize)"

.PP
Definition at line 125 of file map\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for libcp2p from the source code\&.
