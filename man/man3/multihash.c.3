.TH "/media/solidity/DATA/Code/RTradeLtd/libcp2p/src/multihash/multihash.c" 3 "Fri Jul 24 2020" "libcp2p" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/media/solidity/DATA/Code/RTradeLtd/libcp2p/src/multihash/multihash.c
.SH SYNOPSIS
.br
.PP
\fC#include 'multihash/multihash\&.h'\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'multihash/errors\&.h'\fP
.br
\fC#include 'multihash/generic\&.h'\fP
.br
\fC#include 'multihash/hashes\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBVARINT_MASK\fP   (1 << 7)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static int \fBcheck_len\fP (size_t len)"
.br
.ti -1c
.RI "static int \fBcheck_multihash\fP (const unsigned char mh[], size_t len)"
.br
.ti -1c
.RI "int \fBmh_multihash_hash\fP (const unsigned char *mh, size_t len)"
.br
.RI "returns hash code or error (which is < 0) "
.ti -1c
.RI "int \fBmh_multihash_length\fP (const unsigned char *mh, size_t len)"
.br
.ti -1c
.RI "int \fBmh_multihash_digest\fP (const unsigned char *multihash, size_t len, unsigned char **digest, size_t *digest_len)"
.br
.RI "gives access to raw digest inside multihash buffer "
.ti -1c
.RI "int \fBmh_new_length\fP (int code, size_t hash_len)"
.br
.RI "determine the size of the multihash given the data size "
.ti -1c
.RI "int \fBmh_new\fP (unsigned char *buffer, int code, const unsigned char *digest, size_t digest_len)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define VARINT_MASK   (1 << 7)"

.PP
Definition at line 10 of file multihash\&.c\&.
.SH "Function Documentation"
.PP 
.SS "static int check_len (size_t len)\fC [static]\fP"
checks the length of a multihash for validity 
.PP
\fBParameters\fP
.RS 4
\fIlen\fP the length of the multihash 
.RE
.PP
\fBReturns\fP
.RS 4
errors or \fBMH_E_NO_ERROR(0)\fP 
.RE
.PP

.PP
Definition at line 17 of file multihash\&.c\&.
.SS "static int check_multihash (const unsigned char mh[], size_t len)\fC [static]\fP"
do some general checks on the multihash for validity 
.PP
\fBParameters\fP
.RS 4
\fImh\fP the multihash 
.br
\fIlen\fP the length of the multihash 
.RE
.PP
\fBReturns\fP
.RS 4
errors or \fBMH_E_NO_ERROR(0)\fP 
.RE
.PP

.PP
Definition at line 32 of file multihash\&.c\&.
.SS "int mh_multihash_digest (const unsigned char * multihash, size_t len, unsigned char ** digest, size_t * digest_len)"

.PP
gives access to raw digest inside multihash buffer gives access to raw digest inside multihash buffer 
.PP
\fBParameters\fP
.RS 4
\fImultihash\fP the multihash 
.br
\fIlen\fP the length 
.br
\fIdigest\fP the results 
.RE
.PP
\fBReturns\fP
.RS 4
error if less than zero, otherwise 0 
.RE
.PP

.PP
Definition at line 86 of file multihash\&.c\&.
.SS "int mh_multihash_hash (const unsigned char * mh, size_t len)"

.PP
returns hash code or error (which is < 0) returns hash code or error (which is < 0) 
.PP
\fBParameters\fP
.RS 4
\fImh\fP the multihash 
.br
\fIlen\fP the length of the multihash 
.RE
.PP
\fBReturns\fP
.RS 4
errors ( < 0 ) or the multihash 
.RE
.PP

.PP
Definition at line 57 of file multihash\&.c\&.
.SS "int mh_multihash_length (const unsigned char * mh, size_t len)"

.PP
Definition at line 71 of file multihash\&.c\&.
.SS "int mh_new (unsigned char * buffer, int code, const unsigned char * digest, size_t digest_len)"

.PP
Definition at line 118 of file multihash\&.c\&.
.SS "int mh_new_length (int code, size_t hash_len)"

.PP
determine the size of the multihash given the data size determine the size of the multihash given the data size 
.PP
\fBParameters\fP
.RS 4
\fIcode\fP currently not used 
.br
\fIhash_len\fP the data size 
.RE
.PP
\fBReturns\fP
.RS 4
hash_len + 2 (until the code parameter (varint) is added 
.RE
.PP

.PP
Definition at line 104 of file multihash\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for libcp2p from the source code\&.
