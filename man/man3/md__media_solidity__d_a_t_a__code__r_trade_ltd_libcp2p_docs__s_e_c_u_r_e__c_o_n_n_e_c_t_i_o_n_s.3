.TH "md__media_solidity__d_a_t_a__code__r_trade_ltd_libcp2p_docs__s_e_c_u_r_e__c_o_n_n_e_c_t_i_o_n_s" 3 "Thu Aug 6 2020" "libcp2p" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__media_solidity__d_a_t_a__code__r_trade_ltd_libcp2p_docs__s_e_c_u_r_e__c_o_n_n_e_c_t_i_o_n_s \- Secure Connections Overview 
When connecting to a remote peer, we have a multiaddress that looks like \fC/ip4/127\&.0\&.0\&.1/tcp/9090/p2p/somepeerid\fP\&. \fCsomepeerid\fP corresponds to the SHA256 hash of an ECC public key in PEM format\&. When connecting to the remote peer, we initiate the connection over an insecure connection asking for public key corresponding to the peerID\&. When we receive the public key, we calculate the peerID locally\&. If it matches we then initiate an ECDH key agreement\&. The new key from the key agreement is used to then encrypt/decrypt messages with the peer\&.
.SH "Why Not Just Use TLS"
.PP
The main reason for not using TLS directly is that it is a resource intensive process and requires using trusted CA issued certificates\&. By just using ECDSA keys and ECDH for shared secret negotiation, we can have a lightweight method of providing secure communications\&. Eventually a TLS implementation may be integrated if it proves to be needed\&.
.SH "Process"
.PP
.SS "Code"
put this into mermaidjs to generate the diagram
.PP
.PP
.nf
sequenceDiagram
    Peer1->>+Peer2: Connect to multiaddress of peer2
    Peer1->>+Peer2: Ask for public key corresponding to the multiaddress
    Peer2->>+Peer1: Reply with ECC public key
    Peer1->>+Peer1: Compute sha256 hash of ECC public key and convert to PeerID format
    Peer1->>+Peer1: Verify that the peerID is the same, otherwise disconnected
    Peer1->>+Peer2: Conduct ECDH key agreement to derive shared secret key
    Peer2->>+Peer1: 
    Note over Peer1,Peer2: After successful key agreement all messages exchange via encryption
    Note over Peer1,Peer2: Secret key for AES message encryption is sha256 hash of ECDH priv key
    Note over Peer1,Peer2: We take the sha256 hash of the private key in PEM format
.fi
.PP
.SS "Diagram"
 
